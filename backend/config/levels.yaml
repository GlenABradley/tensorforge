# Tensor Forge Level Configuration
# This file defines all educational levels in the game

levels:
  1:
    id: 1
    title: "Train Your First AI Pet"
    description: "Draw shapes and watch your AI learn to recognize them!"
    objective: "Train a neural network to classify hand-drawn shapes"
    type: "standard"
    concepts:
      - "neural_networks"
      - "training"
      - "classification"
    available_components:
      - "neural_layer"
      - "activation_relu"
    success_criteria:
      accuracy_threshold: 0.8
      required_components: ["neural_layer"]
      min_training_examples: 3
    hints:
      - "Try adding a Neural Layer first to give your AI a brain!"
      - "Don't forget the Activation Function - it helps your AI think in complex ways!"
      - "Draw at least 3 different shapes to teach your AI properly."
      - "Make sure to include both a Neural Layer AND an Activation Function."
    educational_content:
      intro: "Welcome to AI training! You're about to create your first artificial intelligence."
      concepts_explained:
        neural_network: "A network of artificial neurons that can learn patterns"
        training: "Teaching the AI by showing it examples"
        classification: "The AI learns to put things into categories"
    prerequisites: []

  2:
    id: 2
    title: "Build Your First Neural Network"
    description: "Learn to stack layers and create deeper AI networks!"
    objective: "Build a multi-layer neural network and understand tensor flow"
    type: "standard"
    concepts:
      - "deep_networks"
      - "layer_stacking" 
      - "tensor_operations"
    available_components:
      - "neural_layer"
      - "activation_relu"
      - "dense_layer"
      - "dropout"
    success_criteria:
      efficiency_threshold: 0.85
      required_components: ["neural_layer", "activation_relu"]
      min_components: 3
      bonus_components: ["dense_layer", "dropout"]
    hints:
      - "Start with a Neural Layer as your foundation."
      - "Add a Dense Layer to make your network deeper and smarter."
      - "Don't forget an Activation Function - your network needs non-linearity!"
      - "Try adding Dropout to prevent overfitting and improve performance."
      - "You need at least 3 components, but more layers often work better!"
    educational_content:
      intro: "Now let's build a more sophisticated AI! Deep networks can learn complex patterns."
      concepts_explained:
        deep_networks: "Networks with multiple layers can learn increasingly complex features"
        layer_stacking: "Each layer processes and transforms the data before passing it on"
        tensor_operations: "Mathematical operations on multi-dimensional data arrays"
    prerequisites: [1]

  3:
    id: 3
    title: "Pattern Detective"
    description: "Build an AI that finds hidden patterns in data"
    objective: "Create a simple linear model to find patterns"
    type: "standard"
    concepts:
      - "linear_models"
      - "weights"
      - "bias"
      - "pattern_recognition"
    available_components:
      - "neural_layer"
      - "activation_relu"
      - "dense_layer"
      - "tensor_add"
      - "tensor_multiply"
    success_criteria:
      accuracy_threshold: 0.75
      pattern_recognition: true
      required_operations: ["tensor_add", "tensor_multiply"]
    hints:
      - "Use tensor operations to transform your input data."
      - "Try combining addition and multiplication to find patterns."
      - "Linear models use weighted combinations - multiplication helps with weighting!"
      - "Remember: your AI needs to both process (multiply) and combine (add) information."
    educational_content:
      intro: "Every AI is a pattern detective - let's teach yours to find clues!"
      concepts_explained:
        linear_models: "A simple AI that draws straight lines through data"
        weights: "How much the AI pays attention to each input"
        bias: "The AI's starting assumption about the answer"
        pattern_recognition: "Finding meaningful relationships in data"
    prerequisites: [2]

  4:
    id: 4
    title: "Smart Pet Challenge"
    description: "MINI-BOSS: Combine everything to create the ultimate AI pet!"
    objective: "Build a complete AI system using Levels 1-3 knowledge"
    type: "mini_boss"
    concepts:
      - "integration"
      - "multi_task_learning"
      - "ai_systems"
    available_components:
      - "neural_layer"
      - "activation_relu"
      - "dense_layer"
      - "dropout"
      - "tensor_add"
      - "tensor_multiply"
    success_criteria:
      accuracy_threshold: 0.9
      multi_task_performance: true
      architecture_complexity: 4
      efficiency_threshold: 0.88
    hints:
      - "This is a challenge level - you'll need to use everything you've learned!"
      - "Build a deep network with multiple layers for better performance."
      - "Include regularization (Dropout) to make your AI more robust."
      - "Use tensor operations to preprocess your data effectively."
      - "Aim for at least 4 components in a well-structured architecture."
    educational_content:
      intro: "Time for your AI to prove itself! Can it handle multiple challenges?"
      victory_message: "Congratulations! Your AI pet is now officially smart!"
      concepts_explained:
        integration: "Combining multiple AI techniques for better performance"
        multi_task_learning: "Training AI to handle several related tasks"
        ai_systems: "Complete AI solutions that combine many components"
    prerequisites: [3]

# Future levels framework (Level 5-16)
  5:
    id: 5
    title: "Deep Learning Architect"
    description: "Master the art of stacking layers for powerful AI"
    objective: "Build sophisticated deep networks with multiple hidden layers"
    type: "standard"
    concepts: ["deep_learning", "hidden_layers", "depth_vs_width"]
    available_components: ["neural_layer", "activation_relu", "dense_layer", "dropout", "batch_norm"]
    success_criteria:
      depth_requirement: 5
      accuracy_threshold: 0.85
    prerequisites: [4]

  6:
    id: 6
    title: "Memory Builder"
    description: "Give your AI the power of memory"
    objective: "Build networks that can remember information across time"
    type: "standard"
    concepts: ["sequential_processing", "memory", "recurrent_networks"]
    available_components: ["neural_layer", "activation_relu", "memory_cell", "lstm_layer"]
    success_criteria:
      sequential_accuracy: 0.8
      memory_utilization: true
    prerequisites: [5]

# Concept definitions for educational system
concepts:
  neural_networks: "Networks of artificial neurons that can learn patterns from data"
  training: "The process of teaching AI by showing it examples"
  classification: "Teaching AI to categorize or label different types of data"
  deep_networks: "Neural networks with multiple layers for learning complex patterns"
  layer_stacking: "Combining multiple processing layers to build sophisticated AI"
  tensor_operations: "Mathematical operations on multi-dimensional data arrays"
  activation: "Functions that help neurons make non-linear decisions"
  regularization: "Techniques to prevent AI from memorizing instead of learning"
  pattern_recognition: "The ability to identify meaningful structures in data"
  linear_models: "Simple AI models that find straight-line relationships in data"
  weights: "Parameters that determine how much attention AI pays to each input"
  bias: "AI's initial assumptions or starting point for making decisions"
  integration: "Combining multiple AI techniques for better performance"
  multi_task_learning: "Training AI to handle several related tasks"
  ai_systems: "Complete AI solutions that combine many components"
  deep_learning: "AI with many layers that can learn very complex patterns"
  hidden_layers: "Internal processing layers between input and output"
  sequential_processing: "Processing data in order, like reading a sentence"
  memory: "AI's ability to remember information from earlier in the sequence"
  recurrent_networks: "Networks that can process sequences by remembering past inputs"